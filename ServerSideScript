--[[
    MAIN SERVICE INITIALIZATION
    Handles all service dependencies and core game components
--]]
local function InitializeServices()
    -- Core Roblox services
    local Debris = game:GetService("Debris")
    local DS = game:GetService("DataStoreService")
    local TS = game:GetService("TweenService")
    local PathfindingService = game:GetService("PathfindingService")
    
    -- Game components
    local DataStoreMain = DS:GetDataStore("Main")
    local REvents = game.ReplicatedStorage.RemoteEvents
    local AnimInstance = Instance.new("Animation")
    
    -- Animation configuration
    AnimInstance.AnimationId = "rbxassetid://106938228468653"
    AnimInstance.Parent = workspace

    return {
        Debris = Debris,
        TS = TS,
        PathfindingService = PathfindingService,
        DataStoreMain = DataStoreMain,
        REvents = REvents,
        AnimInstance = AnimInstance
    }
end

--[[
    UTILITY FUNCTIONS
    Reusable helpers for common operations
--]]
local Utilities = {}

-- Sends formatted messages to player clients
function Utilities.SendServerResponse(player, message)
    if player and player:IsDescendantOf(game.Players) then
        REvents.ServerMessage:FireClient(player, message)
    end
end

-- Validates numerical input with optional range constraints
function Utilities.ValidateNumber(input, minVal, maxVal)
    local num = tonumber(input)
    local isValid = num and true or false
    if minVal then isValid = isValid and (num >= minVal) end
    if maxVal then isValid = isValid and (num <= maxVal) end
    return isValid, num
end

-- Creates a basic part with configurable properties
function Utilities.CreateBasicPart(cframe, size, color, options)
    local part = Instance.new("Part")
    part.CFrame = cframe
    part.Size = size or Vector3.new(5, 5, 5)
    part.Color = color or Color3.new(1, 1, 1)
    part.Material = Enum.Material.SmoothPlastic
    
    -- Apply optional properties
    if options then
        part.Anchored = options.anchored or false
        part.CanCollide = options.canCollide or true
        part.Shape = options.shape or Enum.PartType.Block
    end
    
    part.Parent = workspace
    return part
end

--[[
    PHYSICS HELPERS
    Handles physics-based object creation and manipulation
--]]
local PhysicsHelpers = {}

-- Applies linear velocity to an object with automatic cleanup
function PhysicsHelpers.ApplyLinearVelocity(parent, attachment, velocity, lifetime)
    local linearVelocity = Instance.new("LinearVelocity")
    linearVelocity.Attachment0 = attachment
    linearVelocity.VectorVelocity = velocity
    linearVelocity.MaxForce = math.huge
    linearVelocity.Parent = parent
    Debris:AddItem(linearVelocity, lifetime or 2)
    return linearVelocity
end

-- Creates explosion effect at specified position
function PhysicsHelpers.CreateExplosion(position)
    local explosion = Instance.new("Explosion")
    explosion.Position = position
    explosion.BlastRadius = 10
    explosion.BlastPressure = 1000
    explosion.Parent = workspace
    return explosion
end

--[[
    CHARACTER MODIFICATION
    Functions related to player character manipulation
--]]
local CharacterModifiers = {}

-- Replaces Motor6D joints with BallSocketConstraints for ragdoll effect
function CharacterModifiers.ConvertToRagdoll(character)
    for _, joint in ipairs(character:GetDescendants()) do
        if joint:IsA("Motor6D") then
            -- Create replacement constraints
            local att0 = Instance.new("Attachment")
            local att1 = Instance.new("Attachment")
            att0.CFrame = joint.C0
            att1.CFrame = joint.C1
            
            local socket = Instance.new("BallSocketConstraint")
            socket.Attachment0 = att0
            socket.Attachment1 = att1
            socket.TwistLimitsEnabled = true
            
            -- Parent components
            att0.Parent = joint.Part0
            att1.Parent = joint.Part1
            socket.Parent = joint.Parent
            joint.Enabled = false
        end
    end
end

-- Scales R15 character body parts uniformly
function CharacterModifiers.ScaleCharacter(humanoid, scaleFactor)
    if humanoid.RigType ~= Enum.HumanoidRigType.R15 then return end
    
    for _, valueObj in ipairs(humanoid:GetChildren()) do
        if valueObj:IsA("NumberValue") then
            valueObj.Value = scaleFactor
        end
    end
end

--[[
    COMMAND IMPLEMENTATIONS
    Individual command implementations using the helper functions
--]]
local Commands = {}

-- Kills the player's character
function Commands.die(player)
    player.Character.Humanoid.Health = 0
end

-- Modifies workspace gravity
function Commands.grav(player, arg)
    local isValid, value = Utilities.ValidateNumber(arg, 1)
    if isValid then
        workspace.Gravity = value
        Utilities.SendServerResponse(player, "Gravity set to: " .. value)
    end
end

-- Creates orbiting parts around player
function Commands.orbit(player)
    local rootPart = player.Character.HumanoidRootPart
    local orbitalParts = {}
    local radius = 10

    -- Create orbital parts
    for _ = 1, 5 do
        local part = Utilities.CreateBasicPart(
            rootPart.CFrame,
            Vector3.new(3, 3, 3),
            Color3.new(1, 0, 0),
            {anchored = true, canCollide = false, shape = Enum.PartType.Ball}
        )
        table.insert(orbitalParts, part)
        Debris:AddItem(part, 7.5)
    end

    -- Update orbital positions
    local angle = 0
    task.spawn(function()
        while #orbitalParts > 0 do
            for i, part in ipairs(orbitalParts) do
                if not part.Parent then
                    table.remove(orbitalParts, i)
                    break
                end

                local offset = Vector3.new(
                    math.cos(angle + (i-1)*(math.pi*2/#orbitalParts)) * radius,
                    0,
                    math.sin(angle + (i-1)*(math.pi*2/#orbitalParts)) * radius
                )
                part.Position = rootPart.Position + offset
            end
            angle += 0.025
            task.wait(0.01)
        end
    end)
end

--[[
    EVENT HANDLERS
    Manages game events and player connections
--]]
local function HandleChatCommand(player, message)
    -- Parse command format: "/command arg"
    if message:sub(1, 1) ~= "/" then return end
    
    local commandParts = string.split(message:sub(2):lower(), " ")
    local command = commandParts[1]
    local arg = commandParts[2]

    -- Execute valid command
    if Commands[command] then
        task.spawn(function()
            Commands[command](player, arg)
        end)
    end
end

local function InitializePlayer(player)
    player.Chatted:Connect(function(msg)
        HandleChatCommand(player, msg)
    end)
end

--[[
    MAIN INITIALIZATION
    Starts the game systems
--]]
local services = InitializeServices()
game.Players.PlayerAdded:Connect(InitializePlayer)
